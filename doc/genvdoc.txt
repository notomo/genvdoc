*genvdoc.txt*

==============================================================================
Lua module: genvdoc                                          *genvdoc-genvdoc*

generate({plugin_name}, {opts})                           *genvdoc.generate()*
  Generate a document.

  Parameters: ~
    {plugin_name} (string) used for document name
    {opts} (GenerateOption?) |genvdoc.GenerateOption|

==============================================================================
Lua module: genvdoc.util                                *genvdoc-genvdoc.util*

help_code_block_from_file({file_path}, {opts})
                                    *genvdoc.util.help_code_block_from_file()*
  Returns help code block using file.

  Parameters: ~
    {file_path} (string) used for code block
    {opts} (table|nil) default {language = nil}

help_code_block({str}, {opts})                *genvdoc.util.help_code_block()*
  Returns help code block using string.

  Parameters: ~
    {str} (string) used for code block
    {opts} (table|nil) default {language = ""}

==============================================================================
STRUCTURE                                                  *genvdoc-STRUCTURE*

GenerateOption                                        *genvdoc.GenerateOption*

- {output_dir} (string?) output directory path (default: "./doc/")
- {source} (GenerateSource?) |genvdoc.GenerateSource|
- {chapters} ((GenerateChapter[])?) |genvdoc.GenerateChapter|

GenerateSource                                        *genvdoc.GenerateSource*

- {patterns} (string[]) glob patterns to collect document source (default: { "lua/**/*.lua" })

GenerateChapter                                      *genvdoc.GenerateChapter*

- {name} (string|fun(group:string):string) chapter name
- {group} ((fun(node:GenvdocNode):string?)?) chapter grouping
- {body} ((fun():string)?) returns chapter body string

GenvdocNode                                              *genvdoc.GenvdocNode*

- {declaration} (GenvdocDeclaration?)

GenvdocDeclaration                                *genvdoc.GenvdocDeclaration*

- {type} ("function"|"class")
- {module} (string) module name including this declaration

==============================================================================
EXAMPLES                                                    *genvdoc-EXAMPLES*

>lua
  local util = require("genvdoc.util")
  require("genvdoc").generate("example.nvim", {
    output_dir = vim.fn.tempname(),
    source = { patterns = { "lua/genvdoc/test/example_source.lua" } },
    chapters = {
      {
        name = function(group)
          return "Lua module: " .. group
        end,
        group = function(node)
          if node.declaration == nil or node.declaration.type ~= "function" then
            return nil
          end
          return node.declaration.module
        end,
      },
      {
        name = "STRUCTURE",
        group = function(node)
          if node.declaration == nil or node.declaration.type ~= "class" then
            return nil
          end
          return "STRUCTURE"
        end,
      },
      {
        name = "EXAMPLES",
        body = function()
          return util.help_code_block_from_file("lua/genvdoc/test/example.lua", { language = "lua" })
        end,
      },
    },
  })
<

==============================================================================
vim:tw=78:ts=8:ft=help
